name: Signed Release

# This workflow creates a signed release when you have Apple Developer certificates
# Set up the following secrets in your repository:
# - APPLE_CERTIFICATE: Base64 encoded .p12 certificate
# - APPLE_CERTIFICATE_PASSWORD: Password for the certificate
# - APPLE_TEAM_ID: Your Apple Developer Team ID
# - APPLE_IDENTITY: "Developer ID Application: Your Name (XXXXXXXXXX)"

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string
      notarize:
        description: 'Notarize the app (requires Apple ID)'
        required: false
        type: boolean
        default: false

env:
  XCODE_PROJECT: Video2PPT/Video2PPT.xcodeproj
  SCHEME: Video2PPT
  BUILD_DIR: Video2PPT/build
  APP_NAME: Video2PPT

jobs:
  signed-release:
    name: Build Signed Release
    runs-on: macos-latest
    if: |
      github.repository_owner == 'markshawn2020' &&
      secrets.APPLE_CERTIFICATE != ''
    
    permissions:
      contents: write
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
      
      - name: Extract Version
        id: version
        run: |
          VERSION="${{ github.event.inputs.version }}"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "VERSION_NUMBER=${VERSION#v}" >> $GITHUB_OUTPUT
      
      # Import Apple certificate
      - name: Import Certificate
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
        run: |
          # Create temporary keychain
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          KEYCHAIN_PASSWORD=$(openssl rand -base64 32)
          
          # Create keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          
          # Import certificate
          echo "$APPLE_CERTIFICATE" | base64 --decode > certificate.p12
          security import certificate.p12 \
            -P "$APPLE_CERTIFICATE_PASSWORD" \
            -k "$KEYCHAIN_PATH" \
            -T /usr/bin/codesign \
            -T /usr/bin/security
          
          # Set keychain
          security list-keychains -d user -s "$KEYCHAIN_PATH" "login.keychain"
          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          
          rm certificate.p12
      
      # Build signed app
      - name: Build Signed App
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_IDENTITY: ${{ secrets.APPLE_IDENTITY }}
        run: |
          VERSION_NUMBER="${{ steps.version.outputs.VERSION_NUMBER }}"
          
          xcodebuild \
            -project "${{ env.XCODE_PROJECT }}" \
            -scheme "${{ env.SCHEME }}" \
            -configuration Release \
            -derivedDataPath "${{ env.BUILD_DIR }}" \
            clean build \
            CODE_SIGN_IDENTITY="${APPLE_IDENTITY}" \
            DEVELOPMENT_TEAM="${APPLE_TEAM_ID}" \
            CODE_SIGN_STYLE="Manual" \
            PRODUCT_BUNDLE_IDENTIFIER="com.video2ppt.Video2PPT" \
            MARKETING_VERSION="${VERSION_NUMBER}" \
            CURRENT_PROJECT_VERSION="${VERSION_NUMBER}" \
            | xcpretty
      
      # Notarize app (optional)
      - name: Notarize App
        if: github.event.inputs.notarize == 'true'
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          APP_PATH="${{ env.BUILD_DIR }}/Build/Products/Release/${{ env.APP_NAME }}.app"
          
          # Create zip for notarization
          ditto -c -k --keepParent "$APP_PATH" "${{ env.APP_NAME }}.zip"
          
          # Submit for notarization
          xcrun notarytool submit "${{ env.APP_NAME }}.zip" \
            --apple-id "$APPLE_ID" \
            --password "$APPLE_PASSWORD" \
            --team-id "$APPLE_TEAM_ID" \
            --wait
          
          # Staple the ticket
          xcrun stapler staple "$APP_PATH"
      
      # Create signed DMG
      - name: Create Signed DMG
        id: dmg
        env:
          APPLE_IDENTITY: ${{ secrets.APPLE_IDENTITY }}
        run: |
          VERSION="${{ steps.version.outputs.VERSION }}"
          DMG_NAME="${{ env.APP_NAME }}-${VERSION}-signed.dmg"
          APP_PATH="${{ env.BUILD_DIR }}/Build/Products/Release/${{ env.APP_NAME }}.app"
          
          # Create DMG (similar to unsigned process)
          DMG_TEMP="dmg_temp"
          rm -rf "$DMG_TEMP"
          mkdir -p "$DMG_TEMP"
          
          cp -r "$APP_PATH" "$DMG_TEMP/"
          ln -s /Applications "$DMG_TEMP/Applications"
          
          # Create DMG
          hdiutil create -srcfolder "$DMG_TEMP" -volname "${{ env.APP_NAME }}" \
            -fs HFS+ -format UDZO -o "$DMG_NAME"
          
          # Sign the DMG
          codesign --force --sign "${APPLE_IDENTITY}" "$DMG_NAME"
          
          # Verify signature
          codesign --verify --verbose "$DMG_NAME"
          spctl -a -t open --context context:primary-signature -v "$DMG_NAME"
          
          # Clean up
          rm -rf "$DMG_TEMP"
          
          echo "DMG_PATH=$DMG_NAME" >> $GITHUB_OUTPUT
          echo "✅ Signed DMG created: $DMG_NAME"
      
      # Create release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.VERSION }}
          name: Video2PPT ${{ steps.version.outputs.VERSION }} (Signed)
          body: |
            # Video2PPT ${{ steps.version.outputs.VERSION }} - Signed Release
            
            ✅ This release is **code-signed** with an Apple Developer certificate.
            
            ## Installation
            1. Download the DMG file
            2. Open and drag Video2PPT to Applications
            3. Enable Finder extension in System Settings
            
            **Note**: This signed version should not trigger Gatekeeper warnings.
          draft: false
          prerelease: false
          files: |
            ${{ steps.dmg.outputs.DMG_PATH }}
      
      # Cleanup keychain
      - name: Cleanup
        if: always()
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db || true