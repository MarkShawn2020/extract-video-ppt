name: Semantic Release

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:
    inputs:
      dry-run:
        description: 'Perform a dry run (no release)'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  semantic-release:
    name: Semantic Release
    runs-on: macos-latest
    
    outputs:
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
      new_release_version: ${{ steps.semantic.outputs.new_release_version }}
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install semantic-release
        run: |
          npm install -g \
            semantic-release \
            @semantic-release/commit-analyzer \
            @semantic-release/release-notes-generator \
            @semantic-release/changelog \
            @semantic-release/exec \
            @semantic-release/git \
            @semantic-release/github \
            conventional-changelog-conventionalcommits
      
      - name: Create update script
        run: |
          cat > scripts/update-version.sh << 'EOF'
          #!/bin/bash
          VERSION=$1
          echo "Updating version to $VERSION"
          
          # Update Python version
          if [ -f "video2ppt/__init__.py" ]; then
            sed -i '' "s/__version__ = .*/__version__ = \"$VERSION\"/" video2ppt/__init__.py
          fi
          
          # Update Info.plist
          if [ -f "video2ppt/Video2PPT/Info.plist" ]; then
            /usr/libexec/PlistBuddy -c "Set :CFBundleShortVersionString $VERSION" \
              "video2ppt/Video2PPT/Info.plist" 2>/dev/null || true
            /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $VERSION" \
              "video2ppt/Video2PPT/Info.plist" 2>/dev/null || true
          fi
          
          # Update package.json if exists
          if [ -f "package.json" ]; then
            npm version $VERSION --no-git-tag-version --allow-same-version
          fi
          EOF
          chmod +x scripts/update-version.sh
      
      - name: Dry Run (if requested)
        if: github.event.inputs.dry-run == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🔍 Running semantic-release in dry-run mode..."
          npx semantic-release --dry-run
      
      - name: Semantic Release
        if: github.event.inputs.dry-run != 'true'
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npx semantic-release
      
      - name: Output Release Info
        if: steps.semantic.outputs.new_release_published == 'true'
        run: |
          echo "🎉 New release published: v${{ steps.semantic.outputs.new_release_version }}"
          echo "Release version: ${{ steps.semantic.outputs.new_release_version }}"
          echo "Release notes: Check GitHub Releases page"
  
  build-dmg:
    name: Build DMG
    needs: semantic-release
    if: needs.semantic-release.outputs.new_release_published == 'true'
    runs-on: macos-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: master  # Checkout the updated master branch with version changes
          fetch-depth: 0
      
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Build Application
        run: |
          VERSION="${{ needs.semantic-release.outputs.new_release_version }}"
          echo "Building Video2PPT v$VERSION"
          
          # Clean and build
          rm -rf video2ppt/build
          xcodebuild \
            -project video2ppt/Video2PPT.xcodeproj \
            -scheme Video2PPT \
            -configuration Release \
            -derivedDataPath video2ppt/build \
            clean build \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            MARKETING_VERSION="$VERSION" \
            CURRENT_PROJECT_VERSION="$VERSION"
          
          # Skip signing in CI - it doesn't provide real benefits for self-signed apps
          echo "ℹ️ Skipping code signing in CI environment"
          echo "📝 Note: The app will be distributed unsigned. Users need to right-click and select 'Open' on first launch."
      
      - name: Create DMG
        id: dmg
        run: |
          VERSION="${{ needs.semantic-release.outputs.new_release_version }}"
          DMG_NAME="Video2PPT-v${VERSION}.dmg"
          APP_PATH="video2ppt/build/Build/Products/Release/Video2PPT.app"
          
          # Create DMG
          DMG_TEMP="dmg_temp"
          rm -rf "$DMG_TEMP"
          mkdir -p "$DMG_TEMP"
          
          cp -r "$APP_PATH" "$DMG_TEMP/"
          ln -s /Applications "$DMG_TEMP/Applications"
          
          # Create DMG
          hdiutil create -srcfolder "$DMG_TEMP" -volname "Video2PPT" \
            -fs HFS+ -format UDZO -o "$DMG_NAME"
          
          rm -rf "$DMG_TEMP"
          
          echo "dmg_path=$DMG_NAME" >> $GITHUB_OUTPUT
          echo "✅ Created DMG: $DMG_NAME"
      
      - name: Upload DMG to Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ needs.semantic-release.outputs.new_release_version }}"
          DMG_PATH="${{ steps.dmg.outputs.dmg_path }}"
          
          # Upload DMG to the release
          gh release upload "v$VERSION" "$DMG_PATH" \
            --clobber \
            --repo ${{ github.repository }}
          
          echo "✅ DMG uploaded to release v$VERSION"